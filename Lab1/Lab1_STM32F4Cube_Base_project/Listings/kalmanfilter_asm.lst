


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           Kalmanfilter_asm
    3 00000000         
    4 00000000         ; function Kalmanfilter_asm
    5 00000000         ; inputs:
    6 00000000         ; -------
    7 00000000         ; R0: pointer to the input (float *)
    8 00000000         ; R1: pointer to filtered data array (float *)
    9 00000000         ; R2: length of array (number of floats in array)
   10 00000000         ; R3: pointer to Kalman filter state (struct kalman_stat
                       e *)
   11 00000000         ;
   12 00000000         ; outputs:
   13 00000000         ; --------
   14 00000000         ; R0: 0 if successful, 1 if failed due to overflow (int)
                       
   15 00000000         Kalmanfilter_asm
   16 00000000 B470            PUSH             {R4-R6}
   17 00000002 ED93 0A00       VLDR.f32         S0, [R3]    ; q
   18 00000006 EDD3 0A01       VLDR.f32         S1, [R3, #4] ; r
   19 0000000A ED93 1A02       VLDR.f32         S2, [R3, #8] ; x
   20 0000000E EDD3 1A03       VLDR.f32         S3, [R3, #12] ; p
   21 00000012 ED93 2A04       VLDR.f32         S4, [R3, #16] ; k
   22 00000016 F04F 0400       MOV              R4, #0      ; index = 0
   23 0000001A 460D            MOV              R5, R1      ; current address i
                                                            n filtered
   24 0000001C 4606            MOV              R6, R0      ; current address i
                                                            n input array
   25 0000001E         
   26 0000001E         loop
   27 0000001E 4294            CMP              R4, R2
   28 00000020 D035            BEQ              end_loop
   29 00000022 EE71 1A80       VADD.f32         S3, S3, S0  ; p = p + q
   30 00000026 EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; load status
   31 0000002A D63E            BVS              error       ; if overflow, goto
                                                             error
   32 0000002C EE71 2AA0       VADD.f32         S5, S3, S1  ; p + r
   33 00000030 EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; load status
   34 00000034 D639            BVS              error       ; if overflow, goto
                                                             error
   35 00000036 D038            BEQ              error       ; if zero, goto err
                                                            or
   36 00000038 EE81 2AA2       VDIV.f32         S4, S3, S5  ; k = p / (p + r)
   37 0000003C EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; load status
   38 00000040 D633            BVS              error       ; if overflow, goto
                                                             error
   39 00000042 EDD6 2A00       VLDR.f32         S5, [R6]    ; read measurement 
                                                            at index
   40 00000046 EE72 2AC1       VSUB.f32         S5, S5, S2  ; measurement - x
   41 0000004A EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; load status
   42 0000004E D62C            BVS              error       ; if overflow, goto
                                                             error
   43 00000050 EE62 2A82       VMUL.f32         S5, S5, S4  ; k * (measurement 
                                                            - x)
   44 00000054 EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; load status
   45 00000058 D627            BVS              error       ; if overflow, goto
                                                             error
   46 0000005A EE31 1A22       VADD.f32         S2, S2, S5  ; x = x + k * (meas
                                                            urement - x)



ARM Macro Assembler    Page 2 


   47 0000005E EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; load status
   48 00000062 D622            BVS              error       ; if overflow, goto
                                                             error
   49 00000064 ED85 1A00       VSTR.f32         S2, [R5]    ; store filtered x 
                                                            in array
   50 00000068 EEF7 2A00       VLDR.f32         S5, =1.0    ; 1
   51 0000006C EE72 2AC2       VSUB.f32         S5, S5, S4  ; 1 - k
   52 00000070 EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; load status
   53 00000074 D619            BVS              error       ; if overflow, goto
                                                             error
   54 00000076 EE61 1AA2       VMUL.f32         S3, S3, S5  ; p = (1 - k)*p
   55 0000007A EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; load status
   56 0000007E D614            BVS              error       ; if overflow, goto
                                                             error
   57 00000080 F104 0401       ADD              R4, R4, #1  ; increment index
   58 00000084 F105 0504       ADD              R5, R5, #4  ; output array: the
                                                             address in bytes i
                                                            ncrements by 4
   59 00000088 F106 0604       ADD              R6, R6, #4  ; input array : the
                                                             address in bytes i
                                                            ncrements by 4
   60 0000008C E7C7            B                loop
   61 0000008E         
   62 0000008E         end_loop
   63 0000008E ED83 0A00       VSTR.f32         S0, [R3]    ; q
   64 00000092 EDC3 0A01       VSTR.f32         S1, [R3, #4] ; r
   65 00000096 ED83 1A02       VSTR.f32         S2, [R3, #8] ; x
   66 0000009A EDC3 1A03       VSTR.f32         S3, [R3, #12] ; p
   67 0000009E ED83 2A04       VSTR.f32         S4, [R3, #16] ; k
   68 000000A2 F04F 0000       MOV              R0, #0
   69 000000A6 BC70            POP              {R4-R6}
   70 000000A8 4770            BX               LR          ; return 0
   71 000000AA         
   72 000000AA         error
   73 000000AA F04F 0001       MOV              R0, #1
   74 000000AE BC70            POP              {R4-R6}
   75 000000B0 4770            BX               LR          ; return 1
   76 000000B2                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\kalmanfilter_asm.d -o.\objects\kalmanfilter_asm.o -I"
H:\My Documents\Microprocessor Systems\MicroP_Labs\Lab1\Lab1_STM32F4Cube_Base_p
roject\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\AR
M\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --pre
define="__UVISION_VERSION SETA 515" --predefine="_RTE_ SETA 1" --predefine="STM
32F407xx SETA 1" --list=.\listings\kalmanfilter_asm.lst Sources\Kalmanfilter_as
m.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Kalmanfilter_asm 00000000

Symbol: Kalmanfilter_asm
   Definitions
      At line 15 in file Sources\Kalmanfilter_asm.s
   Uses
      At line 2 in file Sources\Kalmanfilter_asm.s
Comment: Kalmanfilter_asm used once
end_loop 0000008E

Symbol: end_loop
   Definitions
      At line 62 in file Sources\Kalmanfilter_asm.s
   Uses
      At line 28 in file Sources\Kalmanfilter_asm.s
Comment: end_loop used once
error 000000AA

Symbol: error
   Definitions
      At line 72 in file Sources\Kalmanfilter_asm.s
   Uses
      At line 31 in file Sources\Kalmanfilter_asm.s
      At line 34 in file Sources\Kalmanfilter_asm.s
      At line 35 in file Sources\Kalmanfilter_asm.s
      At line 38 in file Sources\Kalmanfilter_asm.s
      At line 42 in file Sources\Kalmanfilter_asm.s
      At line 45 in file Sources\Kalmanfilter_asm.s
      At line 48 in file Sources\Kalmanfilter_asm.s
      At line 53 in file Sources\Kalmanfilter_asm.s
      At line 56 in file Sources\Kalmanfilter_asm.s

loop 0000001E

Symbol: loop
   Definitions
      At line 26 in file Sources\Kalmanfilter_asm.s
   Uses
      At line 60 in file Sources\Kalmanfilter_asm.s
Comment: loop used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file Sources\Kalmanfilter_asm.s
   Uses
      None
Comment: text unused
5 symbols
339 symbols in table
